---
//import components
import Nav from "../Components/Nav.astro";
import { MiniMenu } from "../Components/ui/MiniMenu";
import MiniMusicPlayer from "../Components/ui/MiniMusicPlayer.tsx";
---

<script>
  import { transitionEnabledOnThisPage } from "astro:transitions/client";

  const header = document.querySelector(".header") as HTMLElement;
  // Buttons
  const musicToggle = document.querySelector(
    "#music-toggle"
  ) as HTMLButtonElement;
  const menuToggle = document.querySelector(
    "#menu-toggle"
  ) as HTMLButtonElement;
  // components
  const musicComp = document.querySelector("#div-music") as HTMLElement;
  const menuComp = document.querySelector("#div-menu") as HTMLElement;

  const states = {
    music: {
      id: "music",
      state: "music",
      component: musicComp,
      expanded: "true",
    },
    menu: {
      id: "menu",
      state: "menu",
      component: menuComp,
    },
  };

  musicToggle.addEventListener("click", () => {
    const state = musicToggle.getAttribute("aria-controls");

    menuToggle.setAttribute("aria-controls", "closed");
    menuComp.setAttribute("aria-hidden", "true");

    if (state === "closed") {
      header.setAttribute("aria-expanded", "true");
      header.setAttribute("aria-mode", "music");
      musicToggle.setAttribute("aria-controls", "open");
      musicComp.setAttribute("aria-hidden", "false");
    } else {
      header.setAttribute("aria-expanded", "false");
      header.setAttribute("aria-mode", "nada");
      musicToggle.setAttribute("aria-controls", "closed");
      musicComp.setAttribute("aria-hidden", "true");
    }

    console.log(state);
  });

  menuToggle.addEventListener("click", () => {
    const state = menuToggle.getAttribute("aria-controls");

    musicToggle.setAttribute("aria-controls", "closed");
    musicComp.setAttribute("aria-hidden", "true");

    if (state === "closed") {
      header.setAttribute("aria-expanded", "true");
      header.setAttribute("aria-mode", "menu");
      menuToggle.setAttribute("aria-controls", "open");
      menuComp.setAttribute("aria-hidden", "false");
    } else {
      header.setAttribute("aria-expanded", "false");
      header.setAttribute("aria-mode", "nada");
      menuToggle.setAttribute("aria-controls", "closed");
      menuComp.setAttribute("aria-hidden", "true");
    }

    console.log(state);
    console.log(musicComp.getAttribute("aria-hidden"));
  });
</script>

<header
  class="header flex flex-col items-center gap-4"
  aria-label="Cabecera de la pagina"
  aria-expanded="false"
  aria-mode="nothing"
>
  <div class="w-full flex items-center gap-2">
    <Nav />
    <div id="buttons-container" class="flex items-center gap-2 ml-auto">
      <button
        type="button"
        id="music-toggle"
        class="ml-auto cursor-pointer aspect-square w-4 rounded-full transition-all"
        aria-controls="closed"
        aria-label="Toggle music"
      >
        <span class="sr-only">Toggle music</span>
      </button>
      <button
        type="button"
        id="menu-toggle"
        class="cursor-pointer aspect-square w-4 rounded-full transition-all"
        aria-controls="closed"
        aria-label="Toggle music"
      >
        <span class="sr-only">Toggle menu</span>
      </button>
    </div>
  </div>
  <div class="relative w-full h-full grid place-items-center">
    <div id="div-music" aria-hidden="true" class="absolute inset-0 m-0 w-full">
      <MiniMusicPlayer client:load />
    </div>
    <div id="div-menu" aria-hidden="true" class="absolute inset-0 m-0 w-full">
      <MiniMenu client:load />
    </div>
  </div>
</header>

<style is:global>
  .header {
    --_bgk-color: hsl(0, 0%, 10%);
    --_text-color: #f5f5f5;
    --_padding: 0.5rem;
    --_rounded: 2rem;
    --_height: 42px;
    --_weight: 360px;

    z-index: calc(9 * 9999);
    position: fixed;
    top: 1rem;
    right: 1rem;
    overflow: hidden;

    width: var(--_weight);
    height: var(--_height);
    padding: var(--_padding) calc(var(--_padding) * 1.3);

    border: solid 1px transparent;
    border-radius: var(--_rounded);
    background-color: var(--_bgk-color);
    color: var(--_text-color);

    transition: width 200ms ease-in-out, height 200ms ease,
      border-radius 150ms linear;

    &[aria-expanded="true"] {
      &[aria-mode="music"] {
        --_rounded: 1rem;
        --_weight: 370px;
        --_height: 216px;
      }

      &[aria-mode="menu"] {
        --_rounded: 1rem;
        --_weight: 355px;
        --_height: 150px;
      }
    }

    #music-toggle {
      background-color: hsl(120, 100%, 70%);
      &[aria-controls="open"] {
        background-color: hsl(0, 100%, 70%);
      }
    }

    #div-music {
      visibility: visible;
      opacity: 1;
      filter: blur(0px);
      transition: opacity 220ms ease-in-out, filter 220ms linear;

      &[aria-hidden="true"] {
        visibility: hidden;
        opacity: 0;
        filter: blur(10px);
      }
    }

    #menu-toggle {
      background-color: hsl(33, 100%, 70%);
      &[aria-controls="open"] {
        background-color: hsl(0, 100%, 70%);
      }
    }

    #div-menu {
      visibility: visible;
      opacity: 1;
      filter: blur(0px);
      transition: opacity 220ms ease-in-out, filter 220ms linear;

      &[aria-hidden="true"] {
        visibility: hidden;
        opacity: 0;
        filter: blur(10px);
      }
    }
  }
</style>
